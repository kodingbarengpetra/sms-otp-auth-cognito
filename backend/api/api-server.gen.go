// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// AuthStartAuthRequest defines model for Auth_StartAuthRequest.
type AuthStartAuthRequest struct {
	PhoneNumber string `json:"phoneNumber"`
}

// AuthStartAuthResponse defines model for Auth_StartAuthResponse.
type AuthStartAuthResponse struct {
	VerifySession string `json:"verifySession"`
}

// AuthVerifyOtpRequest defines model for Auth_VerifyOtpRequest.
type AuthVerifyOtpRequest struct {
	Otp           string `json:"otp"`
	VerifySession string `json:"verifySession"`
}

// AuthVerifyOtpResponse defines model for Auth_VerifyOtpResponse.
type AuthVerifyOtpResponse struct {
	AccessToken  string `json:"accessToken"`
	ExpiresAt    string `json:"expiresAt"`
	RefreshToken string `json:"refreshToken"`
}

// ForbiddenErrorResponse defines model for ForbiddenErrorResponse.
type ForbiddenErrorResponse struct {
	Message string `json:"message"`
}

// RestrictedResponse defines model for RestrictedResponse.
type RestrictedResponse struct {
	Message string `json:"message"`
}

// PostAuthStartAuthJSONRequestBody defines body for PostAuthStartAuth for application/json ContentType.
type PostAuthStartAuthJSONRequestBody = AuthStartAuthRequest

// PostAuthVerifyOtpJSONRequestBody defines body for PostAuthVerifyOtp for application/json ContentType.
type PostAuthVerifyOtpJSONRequestBody = AuthVerifyOtpRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Start authentication
	// (POST /auth/start-auth)
	PostAuthStartAuth(ctx echo.Context) error
	// Verify OTP
	// (POST /auth/verify-otp)
	PostAuthVerifyOtp(ctx echo.Context) error
	// Restricted
	// (GET /restricted)
	GetRestricted(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthStartAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthStartAuth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthStartAuth(ctx)
	return err
}

// PostAuthVerifyOtp converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthVerifyOtp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthVerifyOtp(ctx)
	return err
}

// GetRestricted converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestricted(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestricted(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/start-auth", wrapper.PostAuthStartAuth)
	router.POST(baseURL+"/auth/verify-otp", wrapper.PostAuthVerifyOtp)
	router.GET(baseURL+"/restricted", wrapper.GetRestricted)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RU32/TMBD+V6KDN7Im+8EYedskQKiCVuvES1UhN7k2HovtnS9oUZX/HdkuXbsmYxJU",
	"vF2cO3/ffb7vVpDrymiFii1kK7B5iZXw4WXN5fcJC2IXXeN9jZbdD0PaILFEn2ZKrfBrXc2R3Cc+iMrc",
	"IWTw5vzk4vjk9Ozt+buL9ynEwI1x55ZJqiW0bQyE97UkLCCb7twz2yTr+S3mDG28R8carSzu8/mJJBfN",
	"BK2VWrmD52F303uBv/m0EZteHTSbDrT47/jE/tqXsOqTQ+Q5Wnujf6DqpIcPRhLaS+78S7ggtGVf+RPu",
	"21hPareButr5qGkuiwLVByJN/e1UaK1Y4p+5/E7sArtGV5QzFgcFcplSLbS/Q7I3xVAXUi2jK0GoltEY",
	"mUQ0+TKJRjfjyD0p+IEJowLHg3SQOsLaoBJGQgang+OB85IRXHqeiai5TKzzxZELfSc6DKjrR7DU6nMB",
	"GYy19dbZeAhCI2j5SheNK8i1YlS+VhhzJ3NfndzaMLlhObjoNeECMniVPG6PZL06ku690e7qxlSjPwj6",
	"+1ZO0vRgJNbP7FkUaHOShoPIo6F/UltXlaAGMvBVkdMSFa/RfUqQOhj0aG3356Xe+POQUu+tpv8h9f4m",
	"eonUocoNfxCYNsZ0oEvskPYT8qN94YBtdSyJnpZiOEtP/xluzybswN5kBlUxr0lyA9l0BZdGDrHxJs+m",
	"s3a2LfqWfG3btr8CAAD//2w3iQcCCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
