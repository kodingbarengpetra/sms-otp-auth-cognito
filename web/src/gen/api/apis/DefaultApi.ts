/* tslint:disable */
/* eslint-disable */
/**
 * Koding Bareng Petra SMS OTP Auth
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthStartAuthRequest,
  AuthStartAuthResponse,
  AuthVerifyOtpRequest,
  AuthVerifyOtpResponse,
  ForbiddenErrorResponse,
  RestrictedResponse,
} from '../models';
import {
    AuthStartAuthRequestFromJSON,
    AuthStartAuthRequestToJSON,
    AuthStartAuthResponseFromJSON,
    AuthStartAuthResponseToJSON,
    AuthVerifyOtpRequestFromJSON,
    AuthVerifyOtpRequestToJSON,
    AuthVerifyOtpResponseFromJSON,
    AuthVerifyOtpResponseToJSON,
    ForbiddenErrorResponseFromJSON,
    ForbiddenErrorResponseToJSON,
    RestrictedResponseFromJSON,
    RestrictedResponseToJSON,
} from '../models';

export interface AuthStartAuthPostRequest {
    authStartAuthRequest: AuthStartAuthRequest;
}

export interface AuthVerifyOtpPostRequest {
    authVerifyOtpRequest: AuthVerifyOtpRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Start authentication
     */
    async authStartAuthPostRaw(requestParameters: AuthStartAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthStartAuthResponse>> {
        if (requestParameters.authStartAuthRequest === null || requestParameters.authStartAuthRequest === undefined) {
            throw new runtime.RequiredError('authStartAuthRequest','Required parameter requestParameters.authStartAuthRequest was null or undefined when calling authStartAuthPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/start-auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthStartAuthRequestToJSON(requestParameters.authStartAuthRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthStartAuthResponseFromJSON(jsonValue));
    }

    /**
     * Start authentication
     */
    async authStartAuthPost(requestParameters: AuthStartAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthStartAuthResponse> {
        const response = await this.authStartAuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify OTP
     */
    async authVerifyOtpPostRaw(requestParameters: AuthVerifyOtpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthVerifyOtpResponse>> {
        if (requestParameters.authVerifyOtpRequest === null || requestParameters.authVerifyOtpRequest === undefined) {
            throw new runtime.RequiredError('authVerifyOtpRequest','Required parameter requestParameters.authVerifyOtpRequest was null or undefined when calling authVerifyOtpPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/verify-otp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthVerifyOtpRequestToJSON(requestParameters.authVerifyOtpRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthVerifyOtpResponseFromJSON(jsonValue));
    }

    /**
     * Verify OTP
     */
    async authVerifyOtpPost(requestParameters: AuthVerifyOtpPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthVerifyOtpResponse> {
        const response = await this.authVerifyOtpPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restricted
     */
    async restrictedGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestrictedResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/restricted`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestrictedResponseFromJSON(jsonValue));
    }

    /**
     * Restricted
     */
    async restrictedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestrictedResponse> {
        const response = await this.restrictedGetRaw(initOverrides);
        return await response.value();
    }

}
